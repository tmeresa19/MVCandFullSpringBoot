package com.tigist.javafinal.services;


import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;



@Service
public class DonationService {
	
		//	//import repository
		//	private final DonationRepository donationRepo;
		//	
		//	//constructor
		//	public DonationService( DonationRepository donationRepo) {
		//		this.donationRepo = donationRepo;
		//	}
	
	        //Alternative way to import repository than using the above 3 lines of code
	@Autowired
	private DonationRepository donationRepo;
	
	
	//====================BUILDING ALL BACKEND LOGIC WITH CRUD===================================//
	
	
	  //==================FIND ALL=======================================================//
	
	public List<Donation> allDonations(){
		return donationRepo.findAll();
	}
	
	  //==================CREATE===========================================================//
	
		public Donation createDonation(Donation newDonation) {
				// meaning, go to the donationRepo and save the newDonation. 
				//Even if we didn't include the save method inside the Repository,we can still use it. 
				//That's why, we were able to get all the donations and save the create or post donations in the controller 
			return donationRepo.save(newDonation);
	}
	
		//=================FIND ONE BY ID===================================================//
		
				//The return type of find by id is an Interface/class called Optional. So, it retrieves an entity by it's id
				//it's called Optional data type because it gives us whether something is present or not. If not present, no error will be displayed.
		public Donation findOne(Long id) {
				//return donationRepo.findById(id); since it's optional, we can't return like this but like below:
			Optional<Donation> optionalDonation = donationRepo.findById(id);
				//created optionalDonation object or variable with the datatype of Optional Donation
			if(optionalDonation.isPresent())//one of the method of Optional type is isPresent().
				return optionalDonation.get();//get() allows us to get the data type inside the <> which is of type Donation
			else {
				return null; //because Donation could be null. And null is accepted for Donation datatype
			}
		}
		
		//====================EDIT OR UPDATE============================================//
		
		public Donation updateDonation(Donation oneDonation) { //create and update implementations in the service side is the same as long as we provided the id
				return donationRepo.save(oneDonation);		//edit or update implementation is a combination of create and find by id methods 
			}
		
		//====================DELETE======================================================//
		
		public void removeDonation(Long id) {
			donationRepo.deleteById(id);
		}
	
}
